name: üì¶ Publish to NuGet
on:
  release:
    types:
      - released
      - prereleased
  workflow_dispatch:
jobs:
  deploy_nuget:
    name: üì¶ Publish NuGet Packages
    runs-on: ubuntu-latest
    environment: CI - release environment
    steps:
      - name: üóÇÔ∏è Checkout the repository
        uses: actions/checkout@main
        with:
          fetch-depth: 0

      - name: üè∑Ô∏è Get library name and version from tag
        id: tag_info
        run: |
          TAG_NAME="${GITHUB_REF#refs/tags/}"
          echo "Current tag: $TAG_NAME"

          # Extract library name and version using regex
          if [[ "$TAG_NAME" =~ ^([^@]*)@(.*)$ ]]; then
            LIBRARY_NAME="${BASH_REMATCH[1]}"
            PACKAGE_VERSION="${BASH_REMATCH[2]}"
            echo "{library_name}=$LIBRARY_NAME" >> $GITHUB_OUTPUT
            echo "{package_version}=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
          else
            echo "::error::Tag '$TAG_NAME' does not match the expected format 'library-name@version'"
            exit 1
          fi

      - name: üß™ Output Tag Information (debugging)
        run: |
          echo "Library Name: ${{ steps.tag_info.outputs.library_name }}"
          echo "Package Version: ${{ steps.tag_info.outputs.package_version }}"
          
      - name: üìÇ Determine project directory
        id: project_path
        run: |
          LIBRARY_NAME="${{ steps.tag_info.outputs.library_name }}"
          PROJECT_PATH="$LIBRARY_NAME"
          echo "::set-output name=path::$PROJECT_PATH"
          if [ ! -d "$PROJECT_PATH" ]; then
            echo "::error::Project directory '$PROJECT_PATH' not found for library '$LIBRARY_NAME'"
            exit 1
          fi

      - name: ‚¨áÔ∏è Install .NET 9
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.0.x" # SDK Version

      
          
      # - name: üéÅ Pack ${{ steps.tag_info.outputs.library_name }}
      #   run: |
      #     dotnet pack "${{ steps.project_path.outputs.path }}" --configuration Release -o ./nupkg -p:PackageVersion=${{ steps.tag_info.outputs.package_version }} -p:Version=${{ steps.tag_info.outputs.package_version }}
      #   working-directory: ${{ steps.project_path.outputs.path }}

      # - name: üì® Push ${{ steps.tag_info.outputs.library_name }} to NuGet
      #   run: dotnet nuget push ./nupkg/*.nupkg --api-key ${{secrets.NUGET_API_KEY}} --source https://api.nuget.org/v3/index.json
      #   working-directory: ${{ steps.project_path.outputs.path }}
        